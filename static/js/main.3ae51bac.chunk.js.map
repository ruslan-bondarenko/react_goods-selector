{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","Goods","renderList","list","map","item","status","includes","className","classNames","type","onClick","switchList","renderText","titleText","length","reduce","text","i","arr","selected","setState","filter","clearList","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qQAKMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAe,CACbC,MAAO,I,EAGTC,WAAa,SAACC,GAAD,OACX,6BACGA,EAAKC,KAAI,SAAAC,GACR,IAAMC,EAAS,EAAKN,MAAMC,MAAMM,SAASF,GAEzC,OACE,qBAEEG,UACEC,IACE,YACA,CACE,sBAAuBH,IAN/B,UAWE,wBACEE,UACEC,IACE,cACA,CACE,wBAAyBH,IAI/BI,KAAK,SACLC,QAAS,kBAAM,EAAKC,WAAWN,EAAQD,IAVzC,SAYG,MAEFA,IAxBIA,S,EA+BfQ,WAAa,WACX,IAAQZ,EAAU,EAAKD,MAAfC,MACJa,EAAY,GAwBhB,OAtBqB,IAAjBb,EAAMc,SACRD,EAAS,UAAMb,EAAM,GAAZ,kBAGPA,EAAMc,OAAS,IACjBD,EAAYb,EAAMe,QAAO,SAACC,EAAMZ,EAAMa,EAAGC,GACvC,OAAU,IAAND,EACKb,EAAOY,EAGZC,IAAMC,EAAIJ,OAAS,EACf,GAAN,OAAUE,EAAV,gBAAsBZ,EAAtB,iBAGI,GAAN,OAAUY,EAAV,aAAmBZ,KAClB,KAGgB,IAAjBJ,EAAMc,SACRD,EAAY,qBAGPA,G,EAGTF,WAAa,SAACQ,EAAmBf,IACd,IAAbe,EACF,EAAKC,UAAS,YAAgB,IAAbpB,EAAY,EAAZA,MACf,MAAO,CACLA,MAAM,GAAD,mBAAMA,GAAN,CAAaI,QAItB,EAAKgB,UAAS,YAAgB,IAAbpB,EAAY,EAAZA,MACf,MAAO,CACLA,MAAO,YAAIA,GAAOqB,QAAO,SAAAJ,GAAC,OAAIA,IAAMb,U,EAM5CkB,UAAY,WACV,EAAKF,SAAS,CAAEpB,MAAO,M,4CAGzB,WACE,IAAQA,EAAUuB,KAAKxB,MAAfC,MAER,OACE,sBAAKO,UAAU,MAAf,UACE,6BAAKgB,KAAKX,eACTf,EAAgBiB,QAAUS,KAAKtB,WAAWJ,GAC1CG,EAAMc,OACL,wBACEP,UAAU,eACVE,KAAK,SACLC,QAASa,KAAKD,UAHhB,6BAOE,U,GA3GME,IAAMC,WAiHT3B,ICpIf4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3ae51bac.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface State {\n  Goods: string[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    Goods: [],\n  };\n\n  renderList = (list: string[]) => (\n    <ul>\n      {list.map(item => {\n        const status = this.state.Goods.includes(item);\n\n        return (\n          <li\n            key={item}\n            className={\n              classNames(\n                'list-item',\n                {\n                  'list-item--selected': status,\n                },\n              )\n            }\n          >\n            <button\n              className={\n                classNames(\n                  'button-item',\n                  {\n                    'button-item--selected': status,\n                  },\n                )\n              }\n              type=\"button\"\n              onClick={() => this.switchList(status, item)}\n            >\n              {' '}\n            </button>\n            {item}\n          </li>\n        );\n      })}\n    </ul>\n  );\n\n  renderText = (): string => {\n    const { Goods } = this.state;\n    let titleText = '';\n\n    if (Goods.length === 1) {\n      titleText = `${Goods[0]} is selected.`;\n    }\n\n    if (Goods.length > 1) {\n      titleText = Goods.reduce((text, item, i, arr) => {\n        if (i === 0) {\n          return item + text;\n        }\n\n        if (i === arr.length - 1) {\n          return `${text} and ${item} are selected`;\n        }\n\n        return `${text}, ${item}`;\n      }, '');\n    }\n\n    if (Goods.length === 0) {\n      titleText = 'No goods selected';\n    }\n\n    return titleText;\n  };\n\n  switchList = (selected: boolean, item: string) => {\n    if (selected === false) {\n      this.setState(({ Goods }) => {\n        return {\n          Goods: [...Goods, item],\n        };\n      });\n    } else {\n      this.setState(({ Goods }) => {\n        return {\n          Goods: [...Goods].filter(i => i !== item),\n        };\n      });\n    }\n  };\n\n  clearList = () => {\n    this.setState({ Goods: [] });\n  };\n\n  render() {\n    const { Goods } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>{this.renderText()}</h1>\n        {goodsFromServer.length && this.renderList(goodsFromServer)}\n        {Goods.length ? (\n          <button\n            className=\"button-clear\"\n            type=\"button\"\n            onClick={this.clearList}\n          >\n            Unselected All!\n          </button>\n        ) : ''}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}